---
# Keycloak configuration tasks

- name: Check if kc.sh exists
  ansible.builtin.stat:
    path: /opt/keycloak/bin/kc.sh
  register: kc_script

- name: Check if standalone.sh exists (older versions)
  ansible.builtin.stat:
    path: /opt/keycloak/bin/standalone.sh
  register: standalone_script
  when: not kc_script.stat.exists

- name: Stop Keycloak service if running
  ansible.builtin.systemd:
    name: keycloak
    state: stopped
  ignore_errors: yes

- name: Remove data directory for clean start
  ansible.builtin.file:
    path: /opt/keycloak/data
    state: absent
  become: yes

- name: Configure Keycloak (newer versions)
  ansible.builtin.command:
    cmd: "/opt/keycloak/bin/kc.sh build --db=dev-file"
    chdir: /opt/keycloak
  become: yes
  become_user: keycloak
  register: kc_build
  changed_when: kc_build.rc == 0
  when: kc_script.stat.exists

- name: Update Keycloak service file
  ansible.builtin.template:
    src: keycloak.service.j2
    dest: /etc/systemd/system/keycloak.service
    owner: root
    group: root
    mode: '0644'

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable Keycloak systemd service
  ansible.builtin.systemd:
    name: keycloak
    enabled: yes
    state: started
  register: keycloak_service

- name: Wait for Keycloak to start (HTTP)
  ansible.builtin.uri:
    url: "http://localhost:8080/"
    method: GET
  register: result
  until: result.status is defined and result.status == 200
  retries: 30
  delay: 10
  ignore_errors: yes
  
- name: Check if Keycloak is running
  ansible.builtin.command: 
    cmd: systemctl status keycloak
  register: keycloak_status
  changed_when: false
  failed_when: false
  when: result.status is undefined or result.status != 200

- name: Show Keycloak status
  ansible.builtin.debug:
    var: keycloak_status.stdout_lines
  when: keycloak_status is defined and keycloak_status.stdout_lines is defined

- name: Authenticate to Keycloak
  ansible.builtin.command:
    cmd: "/opt/keycloak/bin/kcadm.sh config credentials --server http://localhost:8080 --realm master --user {{ keycloak_admin_user }} --password {{ keycloak_admin_password }}"
    chdir: /opt/keycloak
  become: yes
  become_user: keycloak
  register: auth_result
  changed_when: auth_result.rc == 0
  
- name: Debug authentication result
  ansible.builtin.debug:
    var: auth_result
    
- name: Create Foreman realm
  ansible.builtin.command:
    cmd: "/opt/keycloak/bin/kcadm.sh create realms -s realm={{ foreman_realm_name }} -s enabled=true -s displayName='Foreman SSO Realm'"
    chdir: /opt/keycloak
  become: yes
  become_user: keycloak
  register: realm_result
  changed_when: realm_result.rc == 0
  failed_when: false
  
- name: Create Foreman client
  ansible.builtin.command:
    cmd: "/opt/keycloak/bin/kcadm.sh create clients -r {{ foreman_realm_name }} -s clientId={{ foreman_client_id }} -s enabled=true -s redirectUris=[\"https://{{ ansible_host }}/users/auth/keycloak/callback\"] -s webOrigins=[\"+\"] -s standardFlowEnabled=true -s directAccessGrantsEnabled=true -s rootUrl=\"https://{{ ansible_host }}\" -s baseUrl=\"/users/auth/keycloak\" -s protocol=openid-connect"
    chdir: /opt/keycloak
  become: yes
  become_user: keycloak
  register: client_result
  changed_when: client_result.rc == 0
  failed_when: false 